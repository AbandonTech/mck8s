apiVersion: v1
kind: Namespace
metadata:
  name: mck8s-ingress
  labels:
    name: mck8s-ingress
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mck8s-ingress-controller
  namespace: mck8s-ingress
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mck8s-ingress
rules:
  - apiGroups: [ "" ]
    resources: [ "services" ]
    verbs: [ "get", "watch", "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mck8s-ingress-global
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mck8s-ingress
subjects:
  - kind: ServiceAccount
    name: mck8s-ingress-controller
    namespace: mck8s-ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mck8s-ingress-controller
  namespace: mck8s-ingress
  labels:
    app: mck8s-ingress-controller
spec:
  selector:
    matchLabels:
      app: mck8s-ingress-controller
  template:
    metadata:
      labels:
        app: mck8s-ingress-controller
    spec:
      serviceAccountName: mck8s-ingress-controller
      containers:
        - name: mck8s-ingress-controller
          image: ghcr.io/abandontech/mck8s-ingress:main
          imagePullPolicy: Always
          ports:
            - name: minecraft
              containerPort: 25565
---
apiVersion: v1
kind: Service
metadata:
  name: mck8s-ingress
  namespace: mck8s-ingress
spec:
  selector:
    app: mck8s-ingress-controller
  type: NodePort
  ports:
    - name: minecraft
      port: 25565
      nodePort: 25565
